@page "/counter"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo

<PageTitle>ToDo List</PageTitle>

<h1>ToDo List</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="h3 text-danger">
        @errorMessage
    </div>
}

<EditForm Model="newTodo" OnValidSubmit="CreateTodoOnValidSubmit">
    <InputText required @bind-Value="newTodo.Task" />
    <button class="btn btn-success" type="submit">Create</button>
</EditForm>

<button class="btn btn-primary" @onclick="FetchTodos">Refresh List</button>

@if (todos != null)
{
    @foreach(var t in todos)
    {
        if(t.IsComplete)
        {
            <div class="h2">
                @t.Task (Completed)
                <button class="btn btn-sm btn-danger"
                    @onclick="() => DeleteTodo(t)">DELETE</button>
            </div>
        }
        else
        {
            <div class="h2">
                @t.Task
                <button class="btn btn-sm btn-primary"
                    @onclick="() => CompleteTodo(t)">Complete</button>
                <button class="btn btn-sm btn-danger"
                    @onclick="() => DeleteTodo(t)">DELETE</button>
                
            </div>
        }

        
    }
}

@code {
    private List<TodoModel>? todos;
    private TodoModel newTodo = new();
    private HttpClient? client;
    private string? errorMessage;

    protected override void OnInitialized()
    {

        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        FetchTodos();
    }


    private async void FetchTodos()
    {
        errorMessage = "";
        try
        {
            todos = await client!.GetFromJsonAsync<List<TodoModel>>("Todos");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        await InvokeAsync(StateHasChanged); 
    }

    private async void CompleteTodo(TodoModel todo)
    {
        await client!.PutAsJsonAsync<string>($"Todos/{todo.Id}/Complete", "");
        todo.IsComplete = true;
        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteTodo(TodoModel todo)
    {
        await client!.DeleteAsync($"Todos/{todo.Id}");
        todos!.Remove(todo);
        await InvokeAsync(StateHasChanged);
    }

    private async void CreateTodoOnValidSubmit()
    {
        errorMessage = "";
        try{
            var resp = await client!.PostAsJsonAsync<string>("Todos", newTodo.Task!);
        }
        catch(Exception ex){
            errorMessage = ex.Message;
        }
        newTodo = new();
        FetchTodos();

    }
}
